{ns hl7-fhir-r5-core.StructureMap,
 import #{hl7-fhir-r5-core.DomainResource
          hl7-fhir-r5-core.markdown
          hl7-fhir-r5-core.BackboneElement
          hl7-fhir-r5-core.decimal
          hl7-fhir-r5-core.boolean
          zen.fhir
          hl7-fhir-r5-core.CodeableConcept
          hl7-fhir-r5-core.UsageContext
          hl7-fhir-r5-core.string
          hl7-fhir-r5-core.value-set.version-algorithm
          hl7-fhir-r5-core.value-set.jurisdiction
          hl7-fhir-r5-core.Element
          hl7-fhir-r5-core.value-set.map-input-mode
          hl7-fhir-r5-core.dateTime
          hl7-fhir-r5-core.value-set.map-group-type-mode
          hl7-fhir-r5-core.date
          hl7-fhir-r5-core.integer
          hl7-fhir-r5-core.time
          hl7-fhir-r5-core.code
          hl7-fhir-r5-core.Identifier
          hl7-fhir-r5-core.value-set.publication-status
          hl7-fhir-r5-core.canonical
          hl7-fhir-r5-core.Coding
          hl7-fhir-r5-core.value-set.map-target-list-mode
          hl7-fhir-r5-core.StructureMap
          hl7-fhir-r5-core.id
          hl7-fhir-r5-core.uri
          hl7-fhir-r5-core.value-set.map-source-list-mode
          hl7-fhir-r5-core.ContactDetail
          hl7-fhir-r5-core.value-set.map-model-mode
          hl7-fhir-r5-core.value-set.map-transform},
 group-rule-schema {:zen/tags #{zen/schema zen.fhir/structure-schema},
                    :zen.fhir/version "0.6.22-1",
                    :confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                    :type zen/map,
                    :keys {:name {:confirms #{hl7-fhir-r5-core.id/schema},
                                  :fhir/flags #{:SU},
                                  :zen/desc "Name of the rule for internal references"},
                           :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                           :source {:type zen/vector,
                                    :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                            :type zen/map,
                                            :keys {:min {:confirms #{hl7-fhir-r5-core.integer/schema},
                                                         :fhir/flags #{:SU},
                                                         :zen/desc "Specified minimum cardinality"},
                                                   :variable {:confirms #{hl7-fhir-r5-core.id/schema},
                                                              :fhir/flags #{:SU},
                                                              :zen/desc "Named context for field, if a field is specified"},
                                                   :element {:confirms #{hl7-fhir-r5-core.string/schema},
                                                             :fhir/flags #{:SU},
                                                             :zen/desc "Optional field for this source"},
                                                   :check {:confirms #{hl7-fhir-r5-core.string/schema},
                                                           :fhir/flags #{:SU},
                                                           :zen/desc "FHIRPath expression  - must be true or the mapping engine throws an error instead of completing"},
                                                   :_type {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :type {:confirms #{hl7-fhir-r5-core.string/schema},
                                                          :fhir/flags #{:SU},
                                                          :zen/desc "Rule only applies if source has this type"},
                                                   :logMessage {:confirms #{hl7-fhir-r5-core.string/schema},
                                                                :fhir/flags #{:SU},
                                                                :zen/desc "Message to put in log if source exists (FHIRPath)"},
                                                   :_defaultValue {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_min {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_logMessage {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_condition {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :max {:confirms #{hl7-fhir-r5-core.string/schema},
                                                         :fhir/flags #{:SU},
                                                         :zen/desc "Specified maximum cardinality (number or *)"},
                                                   :condition {:confirms #{hl7-fhir-r5-core.string/schema},
                                                               :fhir/flags #{:SU},
                                                               :zen/desc "FHIRPath expression  - must be true or the rule does not apply"},
                                                   :context {:confirms #{hl7-fhir-r5-core.id/schema},
                                                             :fhir/flags #{:SU},
                                                             :zen/desc "Type or variable this rule applies to"},
                                                   :_check {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_max {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_element {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :listMode {:confirms #{hl7-fhir-r5-core.code/schema},
                                                              :fhir/flags #{:SU},
                                                              :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.map-source-list-mode/value-set,
                                                                                   :strength :required},
                                                              :zen/desc "first | not_first | last | not_last | only_one"},
                                                   :defaultValue {:confirms #{hl7-fhir-r5-core.string/schema},
                                                                  :fhir/flags #{:SU},
                                                                  :zen/desc "Default value if no value exists"},
                                                   :_listMode {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_variable {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_context {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                            :require #{:context},
                                            :fhir/flags #{:SU},
                                            :zen/desc "Source inputs to the mapping"},
                                    :minItems 1},
                           :target {:type zen/vector,
                                    :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                            :type zen/map,
                                            :keys {:transform {:confirms #{hl7-fhir-r5-core.code/schema},
                                                               :fhir/flags #{:SU},
                                                               :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.map-transform/value-set,
                                                                                    :strength :required},
                                                               :zen/desc "create | copy +"},
                                                   :variable {:confirms #{hl7-fhir-r5-core.id/schema},
                                                              :fhir/flags #{:SU},
                                                              :zen/desc "Named context for field, if desired, and a field is specified"},
                                                   :element {:confirms #{hl7-fhir-r5-core.string/schema},
                                                             :fhir/flags #{:SU},
                                                             :zen/desc "Field to create in the context"},
                                                   :listRuleId {:confirms #{hl7-fhir-r5-core.id/schema},
                                                                :fhir/flags #{:SU},
                                                                :zen/desc "Internal rule reference for shared list items"},
                                                   :_transform {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :context {:confirms #{hl7-fhir-r5-core.string/schema},
                                                             :fhir/flags #{:SU},
                                                             :zen/desc "Variable this rule applies to"},
                                                   :_element {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :listMode {:type zen/vector,
                                                              :every {:confirms #{hl7-fhir-r5-core.code/schema},
                                                                      :fhir/flags #{:SU},
                                                                      :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.map-target-list-mode/value-set,
                                                                                           :strength :required},
                                                                      :zen/desc "first | share | last | single"}},
                                                   :_listRuleId {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :_listMode {:type zen/vector,
                                                               :every {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                                   :_variable {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                   :parameter {:type zen/vector,
                                                               :every {:confirms #{hl7-fhir-r5-core.StructureMap/group-rule-target-parameter-schema}}},
                                                   :_context {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                            :fhir/flags #{:SU},
                                            :zen/desc "Content to create because of this mapping rule"}},
                           :rule {:type zen/vector,
                                  :every {:fhir/flags #{:SU},
                                          :confirms #{hl7-fhir-r5-core.StructureMap/group-rule-schema},
                                          :zen/desc "Rules contained in this rule"}},
                           :dependent {:type zen/vector,
                                       :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                               :type zen/map,
                                               :keys {:name {:confirms #{hl7-fhir-r5-core.id/schema},
                                                             :fhir/flags #{:SU},
                                                             :zen/desc "Name of a rule or group to apply"},
                                                      :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                      :parameter {:type zen/vector,
                                                                  :every {:fhir/flags #{:SU},
                                                                          :confirms #{hl7-fhir-r5-core.StructureMap/group-rule-target-parameter-schema},
                                                                          :zen/desc "Parameter to pass to the rule or group"},
                                                                  :minItems 1}},
                                               :require #{:name
                                                          :parameter},
                                               :fhir/flags #{:SU},
                                               :zen/desc "Which other rules to apply in the context of this rule"}},
                           :documentation {:confirms #{hl7-fhir-r5-core.string/schema},
                                           :zen/desc "Documentation for this instance of data"},
                           :_documentation {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                    :require #{:source},
                    :fhir/flags #{:SU},
                    :zen/desc "Transform Rule from source to target"},
 group-rule-target-parameter-schema {:zen/tags #{zen/schema
                                                 zen.fhir/structure-schema},
                                     :zen.fhir/version "0.6.22-1",
                                     :confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                     :type zen/map,
                                     :keys {:value {:fhir/polymorphic true,
                                                    :type zen/map,
                                                    :exclusive-keys #{#{:date
                                                                        :time
                                                                        :string
                                                                        :dateTime
                                                                        :integer
                                                                        :decimal
                                                                        :id
                                                                        :boolean}},
                                                    :keys {:_decimal {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :_id {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :date {:confirms #{hl7-fhir-r5-core.date/schema}},
                                                           :_date {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :_dateTime {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :time {:confirms #{hl7-fhir-r5-core.time/schema}},
                                                           :string {:confirms #{hl7-fhir-r5-core.string/schema}},
                                                           :dateTime {:confirms #{hl7-fhir-r5-core.dateTime/schema}},
                                                           :_time {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :integer {:confirms #{hl7-fhir-r5-core.integer/schema}},
                                                           :_boolean {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :decimal {:confirms #{hl7-fhir-r5-core.decimal/schema}},
                                                           :id {:confirms #{hl7-fhir-r5-core.id/schema}},
                                                           :_integer {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                           :boolean {:confirms #{hl7-fhir-r5-core.boolean/schema}},
                                                           :_string {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                                    :fhir/flags #{:SU},
                                                    :zen/desc "Parameter value - variable or literal"}},
                                     :require #{:value},
                                     :fhir/flags #{:SU},
                                     :zen/desc "Parameters to the transform"},
 schema {:zen.fhir/version "0.6.22-1",
         :confirms #{hl7-fhir-r5-core.DomainResource/schema
                     zen.fhir/Resource},
         :zen/tags #{zen/schema zen.fhir/base-schema},
         :zen.fhir/profileUri "http://hl7.org/fhir/StructureDefinition/StructureMap",
         :require #{:group :name :status :url},
         :type zen/map,
         :zen/desc "A Map of relationships between 2 structures that can be used to transform data.",
         :keys {:description {:confirms #{hl7-fhir-r5-core.markdown/schema},
                              :zen/desc "Natural language description of the structure map"},
                :date {:confirms #{hl7-fhir-r5-core.dateTime/schema},
                       :fhir/flags #{:SU},
                       :zen/desc "Date last changed"},
                :_import {:type zen/vector,
                          :every {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                :group {:type zen/vector,
                        :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                :type zen/map,
                                :keys {:_documentation {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                       :extends {:confirms #{hl7-fhir-r5-core.id/schema},
                                                 :fhir/flags #{:SU},
                                                 :zen/desc "Another group that this group adds rules to"},
                                       :_extends {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                       :typeMode {:confirms #{hl7-fhir-r5-core.code/schema},
                                                  :fhir/flags #{:SU},
                                                  :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.map-group-type-mode/value-set,
                                                                       :strength :required},
                                                  :zen/desc "types | type-and-types"},
                                       :name {:confirms #{hl7-fhir-r5-core.id/schema},
                                              :fhir/flags #{:SU},
                                              :zen/desc "Human-readable label"},
                                       :rule {:type zen/vector,
                                              :every {:confirms #{hl7-fhir-r5-core.StructureMap/group-rule-schema}}},
                                       :_typeMode {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                       :documentation {:confirms #{hl7-fhir-r5-core.string/schema},
                                                       :fhir/flags #{:SU},
                                                       :zen/desc "Additional description/explanation for group"},
                                       :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                       :input {:type zen/vector,
                                               :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                                       :type zen/map,
                                                       :keys {:name {:confirms #{hl7-fhir-r5-core.id/schema},
                                                                     :fhir/flags #{:SU},
                                                                     :zen/desc "Name for this instance of data"},
                                                              :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                              :type {:confirms #{hl7-fhir-r5-core.string/schema},
                                                                     :fhir/flags #{:SU},
                                                                     :zen/desc "Type for this instance of data"},
                                                              :_type {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                              :mode {:confirms #{hl7-fhir-r5-core.code/schema},
                                                                     :fhir/flags #{:SU},
                                                                     :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.map-input-mode/value-set,
                                                                                          :strength :required},
                                                                     :zen/desc "source | target"},
                                                              :_mode {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                              :documentation {:confirms #{hl7-fhir-r5-core.string/schema},
                                                                              :zen/desc "Documentation for this instance of data"},
                                                              :_documentation {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                                       :require #{:name
                                                                  :mode},
                                                       :fhir/flags #{:SU},
                                                       :zen/desc "Named instance provided when invoking the map"},
                                               :minItems 1}},
                                :require #{:name :input},
                                :fhir/flags #{:SU},
                                :zen/desc "Named sections for reader convenience"},
                        :minItems 1},
                :publisher {:confirms #{hl7-fhir-r5-core.string/schema},
                            :fhir/flags #{:SU},
                            :zen/desc "Name of the publisher/steward (organization or individual)"},
                :jurisdiction {:type zen/vector,
                               :every {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                       :fhir/flags #{:SU},
                                       :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.jurisdiction/value-set,
                                                            :strength :extensible},
                                       :zen/desc "Intended jurisdiction for structure map (if applicable)"}},
                :_publisher {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_copyrightLabel {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :purpose {:confirms #{hl7-fhir-r5-core.markdown/schema},
                          :zen/desc "Why this structure map is defined"},
                :_date {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :name {:confirms #{hl7-fhir-r5-core.string/schema},
                       :fhir/flags #{:SU},
                       :zen/desc "Name for this structure map (computer friendly)"},
                :_status {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :copyrightLabel {:confirms #{hl7-fhir-r5-core.string/schema},
                                 :zen/desc "Copyright holder and year(s)"},
                :_experimental {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :useContext {:type zen/vector,
                             :every {:confirms #{hl7-fhir-r5-core.UsageContext/schema},
                                     :fhir/flags #{:SU},
                                     :zen/desc "The context that the content is intended to support"}},
                :copyright {:confirms #{hl7-fhir-r5-core.markdown/schema},
                            :zen/desc "Use and/or publishing restrictions"},
                :versionAlgorithm {:fhir/polymorphic true,
                                   :type zen/map,
                                   :exclusive-keys #{#{:string
                                                       :Coding}},
                                   :keys {:string {:confirms #{hl7-fhir-r5-core.string/schema}},
                                          :_string {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                          :Coding {:confirms #{hl7-fhir-r5-core.Coding/schema}}},
                                   :fhir/flags #{:SU},
                                   :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.version-algorithm/value-set,
                                                        :strength :extensible},
                                   :zen/desc "How to compare versions"},
                :experimental {:confirms #{hl7-fhir-r5-core.boolean/schema},
                               :fhir/flags #{:SU},
                               :zen/desc "For testing purposes, not real usage"},
                :title {:confirms #{hl7-fhir-r5-core.string/schema},
                        :fhir/flags #{:SU},
                        :zen/desc "Name for this structure map (human friendly)"},
                :_description {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_purpose {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :const {:type zen/vector,
                        :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                :type zen/map,
                                :keys {:name {:confirms #{hl7-fhir-r5-core.id/schema},
                                              :fhir/flags #{:SU},
                                              :zen/desc "Constant name"},
                                       :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                       :value {:confirms #{hl7-fhir-r5-core.string/schema},
                                               :fhir/flags #{:SU},
                                               :zen/desc "FHIRPath exression - value of the constant"},
                                       :_value {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                :fhir/flags #{:SU},
                                :zen/desc "Definition of the constant value used in the map rules"}},
                :structure {:type zen/vector,
                            :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                    :type zen/map,
                                    :keys {:url {:confirms #{hl7-fhir-r5-core.canonical/schema},
                                                 :fhir/flags #{:SU},
                                                 :zen/desc "Canonical reference to structure definition"},
                                           :_url {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                           :mode {:confirms #{hl7-fhir-r5-core.code/schema},
                                                  :fhir/flags #{:SU},
                                                  :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.map-model-mode/value-set,
                                                                       :strength :required},
                                                  :zen/desc "source | queried | target | produced"},
                                           :_mode {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                           :alias {:confirms #{hl7-fhir-r5-core.string/schema},
                                                   :fhir/flags #{:SU},
                                                   :zen/desc "Name for type in this map"},
                                           :_alias {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                           :documentation {:confirms #{hl7-fhir-r5-core.string/schema},
                                                           :zen/desc "Documentation on use of structure"},
                                           :_documentation {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                    :require #{:mode :url},
                                    :fhir/flags #{:SU},
                                    :zen/desc "Structure Definition used by this map"}},
                :status {:confirms #{hl7-fhir-r5-core.code/schema},
                         :fhir/flags #{:SU :?!},
                         :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.publication-status/value-set,
                                              :strength :required},
                         :zen/desc "draft | active | retired | unknown"},
                :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :url {:confirms #{hl7-fhir-r5-core.uri/schema},
                      :fhir/flags #{:SU},
                      :zen/desc "Canonical identifier for this structure map, represented as a URI (globally unique)"},
                :identifier {:type zen/vector,
                             :every {:confirms #{hl7-fhir-r5-core.Identifier/schema},
                                     :fhir/flags #{:SU},
                                     :zen/desc "Additional identifier for the structure map"}},
                :_copyright {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_title {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :version {:confirms #{hl7-fhir-r5-core.string/schema},
                          :fhir/flags #{:SU},
                          :zen/desc "Business version of the structure map"},
                :_version {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :import {:type zen/vector,
                         :every {:confirms #{hl7-fhir-r5-core.canonical/schema},
                                 :fhir/flags #{:SU},
                                 :zen/desc "Other maps used by this map (canonical URLs)"}},
                :contact {:type zen/vector,
                          :every {:confirms #{hl7-fhir-r5-core.ContactDetail/schema},
                                  :fhir/flags #{:SU},
                                  :zen/desc "Contact details for the publisher"}},
                :_url {:confirms #{hl7-fhir-r5-core.Element/schema}}},
         :zen.fhir/type "StructureMap"}}
