{ns hl7-fhir-r5-core.SpecimenDefinition,
 import #{hl7-fhir-r5-core.DomainResource
          hl7-fhir-r5-core.markdown
          hl7-fhir-r5-core.BackboneElement
          hl7-fhir-r5-core.boolean
          zen.fhir
          hl7-fhir-r5-core.value-set.container-cap
          hl7-fhir-r5-core.CodeableConcept
          hl7-fhir-r5-core.Group
          hl7-fhir-r5-core.UsageContext
          hl7-fhir-r5-core.SimpleQuantity
          hl7-fhir-r5-core.string
          hl7-fhir-r5-core.value-set.version-algorithm
          hl7-fhir-r5-core.value-set.jurisdiction
          hl7-fhir-r5-core.Element
          hl7-terminology-r5.value-set.v2-0487
          hl7-fhir-r5-core.dateTime
          hl7-fhir-r5-core.value-set.diagnostic-service-sections
          hl7-fhir-r5-core.value-set.container-material
          hl7-fhir-r5-core.Reference
          hl7-fhir-r5-core.date
          hl7-fhir-r5-core.value-set.handling-condition
          hl7-fhir-r5-core.code
          hl7-terminology-r5.value-set.v2-0371
          hl7-fhir-r5-core.Identifier
          hl7-fhir-r5-core.Period
          hl7-fhir-r5-core.value-set.publication-status
          hl7-fhir-r5-core.canonical
          hl7-fhir-r5-core.value-set.specimen-contained-preference
          hl7-fhir-r5-core.Duration
          hl7-fhir-r5-core.Coding
          hl7-fhir-r5-core.value-set.specimen-container-type
          hl7-fhir-r5-core.Range
          hl7-fhir-r5-core.SubstanceDefinition
          hl7-fhir-r5-core.value-set.specimen-collection
          hl7-fhir-r5-core.Quantity
          hl7-fhir-r5-core.value-set.rejection-criteria
          hl7-fhir-r5-core.uri
          hl7-fhir-r5-core.value-set.prepare-patient-prior-specimen-collection
          hl7-fhir-r5-core.ContactDetail},
 schema {:zen.fhir/version "0.6.29",
         :confirms #{hl7-fhir-r5-core.DomainResource/schema
                     zen.fhir/Resource},
         :zen/tags #{zen/schema zen.fhir/base-schema},
         :zen.fhir/profileUri "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition",
         :require #{:status},
         :type zen/map,
         :zen/desc "A kind of specimen with associated set of requirements.",
         :keys {:description {:confirms #{hl7-fhir-r5-core.markdown/schema},
                              :zen/desc "Natural language description of the SpecimenDefinition"},
                :date {:confirms #{hl7-fhir-r5-core.dateTime/schema},
                       :fhir/flags #{:SU},
                       :zen/desc "Date status first applied"},
                :publisher {:confirms #{hl7-fhir-r5-core.string/schema},
                            :fhir/flags #{:SU},
                            :zen/desc "The name of the individual or organization that published the SpecimenDefinition"},
                :approvalDate {:confirms #{hl7-fhir-r5-core.date/schema},
                               :zen/desc "When SpecimenDefinition was approved by publisher"},
                :jurisdiction {:type zen/vector,
                               :every {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                       :fhir/flags #{:SU},
                                       :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.jurisdiction/value-set,
                                                            :strength :extensible},
                                       :zen/desc "Intended jurisdiction for this SpecimenDefinition (if applicable)"}},
                :_publisher {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_copyrightLabel {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :purpose {:confirms #{hl7-fhir-r5-core.markdown/schema},
                          :zen/desc "Why this SpecimenDefinition is defined"},
                :_date {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :name {:confirms #{hl7-fhir-r5-core.string/schema},
                       :fhir/flags #{:SU},
                       :zen/desc "Name for this {{title}} (computer friendly)"},
                :_status {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_timeAspect {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :copyrightLabel {:confirms #{hl7-fhir-r5-core.string/schema},
                                 :zen/desc "Copyright holder and year(s)"},
                :_experimental {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :useContext {:type zen/vector,
                             :every {:confirms #{hl7-fhir-r5-core.UsageContext/schema},
                                     :zen/desc "Content intends to support these contexts"}},
                :copyright {:confirms #{hl7-fhir-r5-core.markdown/schema},
                            :zen/desc "Use and/or publishing restrictions"},
                :versionAlgorithm {:fhir/polymorphic true,
                                   :type zen/map,
                                   :exclusive-keys #{#{:string
                                                       :Coding}},
                                   :keys {:string {:confirms #{hl7-fhir-r5-core.string/schema}},
                                          :_string {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                          :Coding {:confirms #{hl7-fhir-r5-core.Coding/schema}}},
                                   :fhir/flags #{:SU},
                                   :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.version-algorithm/value-set,
                                                        :strength :extensible},
                                   :zen/desc "How to compare versions"},
                :_approvalDate {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :experimental {:confirms #{hl7-fhir-r5-core.boolean/schema},
                               :fhir/flags #{:SU},
                               :zen/desc "If this SpecimenDefinition is not for real usage"},
                :timeAspect {:confirms #{hl7-fhir-r5-core.string/schema},
                             :fhir/flags #{:SU},
                             :zen/desc "Time aspect for collection"},
                :derivedFromCanonical {:type zen/vector,
                                       :every {:confirms #{hl7-fhir-r5-core.canonical/schema},
                                               :fhir/flags #{:SU},
                                               :zen/desc "Based on FHIR definition of another SpecimenDefinition"}},
                :title {:confirms #{hl7-fhir-r5-core.string/schema},
                        :fhir/flags #{:SU},
                        :zen/desc "Name for this SpecimenDefinition (Human friendly)"},
                :_description {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :patientPreparation {:type zen/vector,
                                     :every {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                             :fhir/flags #{:SU},
                                             :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.prepare-patient-prior-specimen-collection/value-set,
                                                                  :strength :example},
                                             :zen/desc "Patient preparation for collection"}},
                :_purpose {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :derivedFromUri {:type zen/vector,
                                 :every {:confirms #{hl7-fhir-r5-core.uri/schema},
                                         :fhir/flags #{:SU},
                                         :zen/desc "Based on external definition"}},
                :_lastReviewDate {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :status {:confirms #{hl7-fhir-r5-core.code/schema},
                         :fhir/flags #{:SU :?!},
                         :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.publication-status/value-set,
                                              :strength :required},
                         :zen/desc "draft | active | retired | unknown"},
                :_name {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :typeCollected {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                :fhir/flags #{:SU},
                                :zen.fhir/value-set {:symbol hl7-terminology-r5.value-set.v2-0487/value-set,
                                                     :strength :example},
                                :zen/desc "Kind of material to collect"},
                :_derivedFromUri {:type zen/vector,
                                  :every {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                :url {:confirms #{hl7-fhir-r5-core.uri/schema},
                      :fhir/flags #{:SU},
                      :zen/desc "Logical canonical URL to reference this SpecimenDefinition (globally unique)"},
                :identifier {:confirms #{hl7-fhir-r5-core.Identifier/schema},
                             :fhir/flags #{:SU},
                             :zen/desc "Business identifier"},
                :lastReviewDate {:confirms #{hl7-fhir-r5-core.date/schema},
                                 :zen/desc "The date on which the asset content was last reviewed by the publisher"},
                :_copyright {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_title {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :version {:confirms #{hl7-fhir-r5-core.string/schema},
                          :fhir/flags #{:SU},
                          :zen/desc "Business version of the SpecimenDefinition"},
                :_version {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :collection {:type zen/vector,
                             :every {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                     :fhir/flags #{:SU},
                                     :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.specimen-collection/value-set,
                                                          :strength :example},
                                     :zen/desc "Specimen collection procedure"}},
                :contact {:type zen/vector,
                          :every {:confirms #{hl7-fhir-r5-core.ContactDetail/schema},
                                  :fhir/flags #{:SU},
                                  :zen/desc "Contact details for the publisher"}},
                :subject {:fhir/polymorphic true,
                          :type zen/map,
                          :exclusive-keys #{#{:CodeableConcept
                                              :Reference}},
                          :keys {:CodeableConcept {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema}},
                                 :Reference {:confirms #{hl7-fhir-r5-core.Reference/schema
                                                         zen.fhir/Reference},
                                             :zen.fhir/reference {:refers #{hl7-fhir-r5-core.Group/schema}}}},
                          :fhir/flags #{:SU},
                          :zen/desc "Type of subject for specimen collection"},
                :_url {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :_derivedFromCanonical {:type zen/vector,
                                        :every {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                :effectivePeriod {:confirms #{hl7-fhir-r5-core.Period/schema},
                                  :fhir/flags #{:SU},
                                  :zen/desc "The effective date range for the SpecimenDefinition"},
                :typeTested {:type zen/vector,
                             :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                     :type zen/map,
                                     :keys {:requirement {:confirms #{hl7-fhir-r5-core.markdown/schema},
                                                          :zen/desc "Requirements for specimen delivery and special handling"},
                                            :retentionTime {:confirms #{hl7-fhir-r5-core.Duration/schema},
                                                            :zen/desc "The usual time for retaining this kind of specimen"},
                                            :_preference {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                            :_singleUse {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                            :isDerived {:confirms #{hl7-fhir-r5-core.boolean/schema},
                                                        :zen/desc "Primary or secondary specimen"},
                                            :_isDerived {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                            :type {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                   :zen.fhir/value-set {:symbol hl7-terminology-r5.value-set.v2-0487/value-set,
                                                                        :strength :example},
                                                   :zen/desc "Type of intended specimen"},
                                            :rejectionCriterion {:type zen/vector,
                                                                 :every {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                                         :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.rejection-criteria/value-set,
                                                                                              :strength :example},
                                                                         :zen/desc "Criterion specified for specimen rejection"}},
                                            :preference {:confirms #{hl7-fhir-r5-core.code/schema},
                                                         :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.specimen-contained-preference/value-set,
                                                                              :strength :required},
                                                         :zen/desc "preferred | alternate"},
                                            :handling {:type zen/vector,
                                                       :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                                               :type zen/map,
                                                               :keys {:temperatureQualifier {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                                                             :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.handling-condition/value-set,
                                                                                                                  :strength :example},
                                                                                             :zen/desc "Qualifies the interval of temperature"},
                                                                      :temperatureRange {:confirms #{hl7-fhir-r5-core.Range/schema},
                                                                                         :zen/desc "Temperature range for these handling instructions"},
                                                                      :maxDuration {:confirms #{hl7-fhir-r5-core.Duration/schema},
                                                                                    :zen/desc "Maximum preservation time"},
                                                                      :instruction {:confirms #{hl7-fhir-r5-core.markdown/schema},
                                                                                    :zen/desc "Preservation instruction"},
                                                                      :_instruction {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                                               :zen/desc "Specimen handling before testing"}},
                                            :container {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                                        :type zen/map,
                                                        :keys {:description {:confirms #{hl7-fhir-r5-core.markdown/schema},
                                                                             :zen/desc "The description of the kind of container"},
                                                               :_preparation {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                               :capacity {:confirms #{hl7-fhir-r5-core.Quantity/schema
                                                                                      hl7-fhir-r5-core.SimpleQuantity/schema},
                                                                          :zen/desc "The capacity of this kind of container"},
                                                               :type {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                                      :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.specimen-container-type/value-set,
                                                                                           :strength :example},
                                                                      :zen/desc "Kind of container associated with the kind of specimen"},
                                                               :cap {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                                     :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.container-cap/value-set,
                                                                                          :strength :example},
                                                                     :zen/desc "Color of container cap"},
                                                               :preparation {:confirms #{hl7-fhir-r5-core.markdown/schema},
                                                                             :zen/desc "Special processing applied to the container for this specimen type"},
                                                               :_description {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                                               :minimumVolume {:fhir/polymorphic true,
                                                                               :type zen/map,
                                                                               :exclusive-keys #{#{:string
                                                                                                   :Quantity}},
                                                                               :keys {:Quantity {:confirms #{hl7-fhir-r5-core.Quantity/schema}},
                                                                                      :string {:confirms #{hl7-fhir-r5-core.string/schema}},
                                                                                      :_string {:confirms #{hl7-fhir-r5-core.Element/schema}}},
                                                                               :zen/desc "Minimum volume"},
                                                               :material {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                                          :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.container-material/value-set,
                                                                                               :strength :example},
                                                                          :zen/desc "The material type used for the container"},
                                                               :additive {:type zen/vector,
                                                                          :every {:confirms #{hl7-fhir-r5-core.BackboneElement/schema},
                                                                                  :type zen/map,
                                                                                  :keys {:additive {:fhir/polymorphic true,
                                                                                                    :type zen/map,
                                                                                                    :exclusive-keys #{#{:CodeableConcept
                                                                                                                        :Reference}},
                                                                                                    :keys {:CodeableConcept {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema}},
                                                                                                           :Reference {:confirms #{hl7-fhir-r5-core.Reference/schema
                                                                                                                                   zen.fhir/Reference},
                                                                                                                       :zen.fhir/reference {:refers #{hl7-fhir-r5-core.SubstanceDefinition/schema}}}},
                                                                                                    :zen.fhir/value-set {:symbol hl7-terminology-r5.value-set.v2-0371/value-set,
                                                                                                                         :strength :example},
                                                                                                    :zen/desc "Additive associated with container"}},
                                                                                  :require #{:additive},
                                                                                  :zen/desc "Additive associated with container"}}},
                                                        :zen/desc "The specimen's container"},
                                            :_requirement {:confirms #{hl7-fhir-r5-core.Element/schema}},
                                            :singleUse {:confirms #{hl7-fhir-r5-core.boolean/schema},
                                                        :zen/desc "Specimen for single use only"},
                                            :testingDestination {:type zen/vector,
                                                                 :every {:confirms #{hl7-fhir-r5-core.CodeableConcept/schema},
                                                                         :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.diagnostic-service-sections/value-set,
                                                                                              :strength :example},
                                                                         :zen/desc "Where the specimen will be tested"}}},
                                     :require #{:preference},
                                     :zen/desc "Specimen in container intended for testing by lab"}}},
         :zen.fhir/type "SpecimenDefinition"}}
