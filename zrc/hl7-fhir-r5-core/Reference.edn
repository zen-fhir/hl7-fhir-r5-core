{ns hl7-fhir-r5-core.Reference,
 import #{zen.fhir
          hl7-fhir-r5-core.value-set.resource-types
          hl7-fhir-r5-core.string
          hl7-fhir-r5-core.Element
          hl7-fhir-r5-core.Identifier
          hl7-fhir-r5-core.DataType
          hl7-fhir-r5-core.uri},
 schema {:zen.fhir/version "0.6.27",
         :confirms #{zen.fhir/Reference
                     hl7-fhir-r5-core.DataType/schema},
         :zen/tags #{zen/schema zen.fhir/structure-schema},
         :zen.fhir/profileUri "http://hl7.org/fhir/StructureDefinition/Reference",
         :zen.fhir/reference {:refers #{}},
         :type zen/map,
         :zen/desc "Reference Type: A reference from one resource to another.",
         :keys {:reference {:confirms #{hl7-fhir-r5-core.string/schema},
                            :fhir/flags #{:SU},
                            :zen/desc "Literal reference, Relative, internal or absolute URL"},
                :_reference {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :type {:confirms #{hl7-fhir-r5-core.uri/schema},
                       :fhir/flags #{:SU},
                       :zen.fhir/value-set {:symbol hl7-fhir-r5-core.value-set.resource-types/value-set,
                                            :strength :extensible},
                       :zen/desc "Type the reference refers to (e.g. \"Patient\") - must be a resource in resources"},
                :_type {:confirms #{hl7-fhir-r5-core.Element/schema}},
                :identifier {:confirms #{hl7-fhir-r5-core.Identifier/schema},
                             :fhir/flags #{:SU},
                             :zen/desc "Logical reference, when literal reference is not known"},
                :display {:confirms #{hl7-fhir-r5-core.string/schema},
                          :fhir/flags #{:SU},
                          :zen/desc "Text alternative for the resource"},
                :_display {:confirms #{hl7-fhir-r5-core.Element/schema}}},
         :zen.fhir/type "Reference"}}
